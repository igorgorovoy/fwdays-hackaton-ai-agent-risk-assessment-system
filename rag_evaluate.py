import os
import json
import asyncio
import numpy as np
from typing import List, Dict
from dotenv import load_dotenv
from app.tarot_agent.agent import TarotAgent

class RAGEvaluator:
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ—Ü—ñ–Ω—é–≤–∞—á–∞ RAG —Å–∏—Å—Ç–µ–º–∏"""
        # –¢–µ—Å—Ç–æ–≤—ñ –∫–µ–π—Å–∏
        self.test_cases = [
            {
                "query": "–©–æ –æ–∑–Ω–∞—á–∞—î –∫–∞—Ä—Ç–∞ –ú–∞–≥?",
                "expected_cards": ["The Magician"],
                "expected_keywords": ["—Ç–≤–æ—Ä—á—ñ—Å—Ç—å", "–≤–æ–ª—è", "–º–∞–π—Å—Ç–µ—Ä–Ω—ñ—Å—Ç—å", "—Å–∏–ª–∞", "—Ç–∞–ª–∞–Ω—Ç"],
                "expected_context": ["–ø–µ—Ä—à–∞ –∫–∞—Ä—Ç–∞ —Å—Ç–∞—Ä—à–∏—Ö –∞—Ä–∫–∞–Ω—ñ–≤", "–µ–ª–µ–º–µ–Ω—Ç –ø–æ–≤—ñ—Ç—Ä—è"]
            },
            {
                "query": "–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ –∫–∞—Ä—Ç—É –°–º–µ—Ä—Ç—å",
                "expected_cards": ["Death"],
                "expected_keywords": ["—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è", "–∑–º—ñ–Ω–∏", "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è", "–ø–æ—á–∞—Ç–æ–∫"],
                "expected_context": ["—Ç—Ä–∏–Ω–∞–¥—Ü—è—Ç–∞ –∫–∞—Ä—Ç–∞", "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è"]
            },
            {
                "query": "–©–æ —Å–∏–º–≤–æ–ª—ñ–∑—É—î –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω–∏?",
                "expected_cards": ["Wheel of Fortune"],
                "expected_keywords": ["–¥–æ–ª—è", "—Ü–∏–∫–ª", "–∑–º—ñ–Ω–∏", "—Ñ–æ—Ä—Ç—É–Ω–∞"],
                "expected_context": ["–¥–µ—Å—è—Ç–∞ –∫–∞—Ä—Ç–∞", "–∫–∞—Ä–º–∞", "—Ü–∏–∫–ª–∏"]
            },
            {
                "query": "–û–ø–∏—à–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏ –ú—ñ—Å—è—Ü—å",
                "expected_cards": ["The Moon"],
                "expected_keywords": ["—ñ–Ω—Ç—É—ó—Ü—ñ—è", "—Å—Ç—Ä–∞—Ö–∏", "—ñ–ª—é–∑—ñ—ó", "–ø—ñ–¥—Å–≤—ñ–¥–æ–º—ñ—Å—Ç—å"],
                "expected_context": ["–≤—ñ—Å—ñ–º–Ω–∞–¥—Ü—è—Ç–∞ –∫–∞—Ä—Ç–∞", "–Ω—ñ—á–Ω–µ —Å–≤—ñ—Ç–∏–ª–æ"]
            },
            {
                "query": "–©–æ –æ–∑–Ω–∞—á–∞—î –¢—É–∑ –ö—É–±–∫—ñ–≤?",
                "expected_cards": ["Ace of Cups"],
                "expected_keywords": ["–µ–º–æ—Ü—ñ—ó", "–ª—é–±–æ–≤", "–ø–æ—á–∞—Ç–æ–∫", "—á–∞—à–∞"],
                "expected_context": ["–º–æ–ª–æ–¥—à—ñ –∞—Ä–∫–∞–Ω–∏", "–º–∞—Å—Ç—å –∫—É–±–∫—ñ–≤"]
            }
        ]
    
    def evaluate_retrieval(self, retrieved_cards: List[str], expected_cards: List[str]) -> Dict[str, float]:
        """
        –û—Ü—ñ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç—ñ –≤–∏—Ç—è–≥–Ω—É—Ç–∏—Ö –∫–∞—Ä—Ç
        
        F1 Score - —Ü–µ –≥–∞—Ä–º–æ–Ω—ñ—á–Ω–µ —Å–µ—Ä–µ–¥–Ω—î –º—ñ–∂ Precision —ñ Recall:
        
        Precision (–¢–æ—á–Ω—ñ—Å—Ç—å) = –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏—Ç—è–≥–Ω—É—Ç—ñ –∫–∞—Ä—Ç–∏ / –í—Å—ñ –≤–∏—Ç—è–≥–Ω—É—Ç—ñ –∫–∞—Ä—Ç–∏
        - –ü–æ–∫–∞–∑—É—î, —Å–∫—ñ–ª—å–∫–∏ –∑ –≤–∏—Ç—è–≥–Ω—É—Ç–∏—Ö –∫–∞—Ä—Ç –±—É–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏
        - –ü—Ä–∏–∫–ª–∞–¥: —è–∫—â–æ –≤–∏—Ç—è–≥–ª–∏ 3 –∫–∞—Ä—Ç–∏ —ñ 2 –ø—Ä–∞–≤–∏–ª—å–Ω—ñ, —Ç–æ Precision = 2/3 = 0.67
        
        Recall (–ü–æ–≤–Ω–æ—Ç–∞) = –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏—Ç—è–≥–Ω—É—Ç—ñ –∫–∞—Ä—Ç–∏ / –í—Å—ñ –æ—á—ñ–∫—É–≤–∞–Ω—ñ –∫–∞—Ä—Ç–∏  
        - –ü–æ–∫–∞–∑—É—î, —Å–∫—ñ–ª—å–∫–∏ –æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –∫–∞—Ä—Ç –±—É–ª–æ –∑–Ω–∞–π–¥–µ–Ω–æ
        - –ü—Ä–∏–∫–ª–∞–¥: —è–∫—â–æ –æ—á—ñ–∫—É–≤–∞–ª–∏ 2 –∫–∞—Ä—Ç–∏ —ñ –∑–Ω–∞–π—à–ª–∏ 1, —Ç–æ Recall = 1/2 = 0.5
        
        F1 = 2 * (Precision * Recall) / (Precision + Recall)
        - –ì–∞—Ä–º–æ–Ω—ñ—á–Ω–µ —Å–µ—Ä–µ–¥–Ω—î, —è–∫–µ –±–∞–ª–∞–Ω—Å—É—î —Ç–æ—á–Ω—ñ—Å—Ç—å —ñ –ø–æ–≤–Ω–æ—Ç—É
        """
        retrieved_set = set(retrieved_cards)
        expected_set = set(expected_cards)
        
        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏—Ç—è–≥–Ω—É—Ç–∏—Ö –∫–∞—Ä—Ç
        correct_cards = retrieved_set.intersection(expected_set)
        
        # Precision: —Å–∫—ñ–ª—å–∫–∏ –∑ –≤–∏—Ç—è–≥–Ω—É—Ç–∏—Ö –∫–∞—Ä—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ñ
        precision = len(correct_cards) / len(retrieved_set) if retrieved_set else 0
        
        # Recall: —Å–∫—ñ–ª—å–∫–∏ –æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –∫–∞—Ä—Ç –∑–Ω–∞–π–¥–µ–Ω–æ
        recall = len(correct_cards) / len(expected_set) if expected_set else 0
        
        # F1 Score: –≥–∞—Ä–º–æ–Ω—ñ—á–Ω–µ —Å–µ—Ä–µ–¥–Ω—î
        f1 = 2 * (precision * recall) / (precision + recall) if (precision + recall) > 0 else 0
        
        return {
            "precision": precision,
            "recall": recall,
            "f1_score": f1,
            "correct_cards": list(correct_cards),
            "missing_cards": list(expected_set - retrieved_set),
            "extra_cards": list(retrieved_set - expected_set)
        }
    
    def evaluate_keyword_presence(self, generated_text: str, expected_keywords: List[str]) -> Dict[str, float]:
        """–û—Ü—ñ–Ω–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤"""
        text_lower = generated_text.lower()
        
        found_keywords = []
        missing_keywords = []
        
        for keyword in expected_keywords:
            if keyword.lower() in text_lower:
                found_keywords.append(keyword)
            else:
                missing_keywords.append(keyword)
        
        keyword_presence = len(found_keywords) / len(expected_keywords) if expected_keywords else 0
        
        return {
            "keyword_presence_score": keyword_presence,
            "found_keywords": found_keywords,
            "missing_keywords": missing_keywords,
            "total_expected": len(expected_keywords),
            "total_found": len(found_keywords)
        }
    
    def evaluate_context(self, generated_text: str, expected_context: List[str]) -> Dict[str, float]:
        """–û—Ü—ñ–Ω–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
        text_lower = generated_text.lower()
        
        found_context = []
        missing_context = []
        
        for context in expected_context:
            if context.lower() in text_lower:
                found_context.append(context)
            else:
                missing_context.append(context)
        
        context_score = len(found_context) / len(expected_context) if expected_context else 0
        
        return {
            "context_score": context_score,
            "found_context": found_context,
            "missing_context": missing_context
        }
    
    def evaluate_response_quality(self, response: str) -> Dict[str, float]:
        """–û—Ü—ñ–Ω–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ—ó —è–∫–æ—Å—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"""
        words = response.split()
        unique_words = set(word.lower() for word in words)
        sentences = response.split('.')
        paragraphs = response.split('\n\n')
        
        return {
            "word_count": len(words),
            "unique_word_count": len(unique_words),
            "sentence_count": len(sentences),
            "paragraph_count": len(paragraphs),
            "avg_words_per_sentence": len(words) / len(sentences) if sentences else 0,
            "vocabulary_diversity": len(unique_words) / len(words) if words else 0
        }
    
    def save_results(self, results: Dict, output_file: str = "rag_evaluation_results.json"):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –æ—Ü—ñ–Ω–∫–∏"""
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {output_file}")

async def run_evaluation():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—É –æ—Ü—ñ–Ω–∫–∏"""
    print("üîç –ü–æ—á–∞—Ç–æ–∫ –æ—Ü—ñ–Ω–∫–∏ RAG —Å–∏—Å—Ç–µ–º–∏...")
    print("=" * 60)
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    evaluator = RAGEvaluator()
    load_dotenv()
    agent = TarotAgent(
        cards_path="./app/static/images/cards",
        vector_store_path="./vector_store"
    )
    agent.initialize_vector_store()
    
    all_results = []
    total_metrics = {
        "f1_scores": [],
        "precision_scores": [],
        "recall_scores": [],
        "keyword_scores": [],
        "context_scores": []
    }
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –≤—Å—ñ—Ö —Ç–µ—Å—Ç–æ–≤–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö
    for i, test_case in enumerate(evaluator.test_cases, 1):
        print(f"\nüìã –¢–µ—Å—Ç {i}/{len(evaluator.test_cases)}: {test_case['query']}")
        print("-" * 50)
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–≥–µ–Ω—Ç–∞
            response = await agent.get_reading(test_case["query"])
            
            # –í–∏—Ç—è–≥—É—î–º–æ –∫–∞—Ä—Ç–∏ —Ç–∞ —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            retrieved_cards = [card["name"] for card in response["cards"]]
            generated_text = response["reading"]
            
            # –û—Ü—ñ–Ω—é—î–º–æ —Ä—ñ–∑–Ω—ñ –∞—Å–ø–µ–∫—Ç–∏
            retrieval_metrics = evaluator.evaluate_retrieval(retrieved_cards, test_case["expected_cards"])
            keyword_metrics = evaluator.evaluate_keyword_presence(generated_text, test_case["expected_keywords"])
            context_metrics = evaluator.evaluate_context(generated_text, test_case["expected_context"])
            quality_metrics = evaluator.evaluate_response_quality(generated_text)
            
            # –í–∏–≤–æ–¥–∏–º–æ –¥–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            print(f"üé¥ –û—á—ñ–∫—É–≤–∞–Ω—ñ –∫–∞—Ä—Ç–∏: {test_case['expected_cards']}")
            print(f"üéØ –í–∏—Ç—è–≥–Ω—É—Ç—ñ –∫–∞—Ä—Ç–∏: {retrieved_cards}")
            
            print(f"\nüìä –ú–µ—Ç—Ä–∏–∫–∏ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è:")
            print(f"   ‚Ä¢ Precision: {retrieval_metrics['precision']:.2f}")
            print(f"   ‚Ä¢ Recall: {retrieval_metrics['recall']:.2f}")
            print(f"   ‚Ä¢ F1 Score: {retrieval_metrics['f1_score']:.2f}")
            
            if retrieval_metrics['correct_cards']:
                print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –∫–∞—Ä—Ç–∏: {retrieval_metrics['correct_cards']}")
            if retrieval_metrics['missing_cards']:
                print(f"   ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω—ñ –∫–∞—Ä—Ç–∏: {retrieval_metrics['missing_cards']}")
            if retrieval_metrics['extra_cards']:
                print(f"   ‚ûï –ó–∞–π–≤—ñ –∫–∞—Ä—Ç–∏: {retrieval_metrics['extra_cards']}")
            
            print(f"\nüìù –ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É:")
            print(f"   ‚Ä¢ –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: {keyword_metrics['keyword_presence_score']:.2f} ({keyword_metrics['total_found']}/{keyword_metrics['total_expected']})")
            print(f"   ‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_metrics['context_score']:.2f}")
            
            if keyword_metrics['found_keywords']:
                print(f"   ‚úÖ –ó–Ω–∞–π–¥–µ–Ω—ñ —Å–ª–æ–≤–∞: {keyword_metrics['found_keywords']}")
            if keyword_metrics['missing_keywords']:
                print(f"   ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω—ñ —Å–ª–æ–≤–∞: {keyword_metrics['missing_keywords']}")
            
            print(f"\nüìà –Ø–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:")
            print(f"   ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤: {quality_metrics['word_count']}")
            print(f"   ‚Ä¢ –†—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å —Å–ª–æ–≤–Ω–∏–∫–∞: {quality_metrics['vocabulary_diversity']:.2f}")
            print(f"   ‚Ä¢ –°–µ—Ä–µ–¥–Ω—è –¥–æ–≤–∂–∏–Ω–∞ —Ä–µ—á–µ–Ω–Ω—è: {quality_metrics['avg_words_per_sentence']:.1f} —Å–ª—ñ–≤")
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–µ—Ç—Ä–∏–∫–∏
            total_metrics["f1_scores"].append(retrieval_metrics['f1_score'])
            total_metrics["precision_scores"].append(retrieval_metrics['precision'])
            total_metrics["recall_scores"].append(retrieval_metrics['recall'])
            total_metrics["keyword_scores"].append(keyword_metrics['keyword_presence_score'])
            total_metrics["context_scores"].append(context_metrics['context_score'])
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            test_result = {
                "test_number": i,
                "query": test_case["query"],
                "expected_cards": test_case["expected_cards"],
                "retrieved_cards": retrieved_cards,
                "retrieval_metrics": retrieval_metrics,
                "keyword_metrics": keyword_metrics,
                "context_metrics": context_metrics,
                "quality_metrics": quality_metrics,
                "generated_text": generated_text
            }
            all_results.append(test_result)
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É: {str(e)}")
    
    # –û–±—á–∏—Å–ª—é—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    print("\n" + "=" * 60)
    print("üìä –ó–ê–ì–ê–õ–¨–ù–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò")
    print("=" * 60)
    
    avg_f1 = np.mean(total_metrics["f1_scores"])
    avg_precision = np.mean(total_metrics["precision_scores"])
    avg_recall = np.mean(total_metrics["recall_scores"])
    avg_keywords = np.mean(total_metrics["keyword_scores"])
    avg_context = np.mean(total_metrics["context_scores"])
    
    print(f"üéØ –°–µ—Ä–µ–¥–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è:")
    print(f"   ‚Ä¢ F1 Score: {avg_f1:.3f} ¬± {np.std(total_metrics['f1_scores']):.3f}")
    print(f"   ‚Ä¢ Precision: {avg_precision:.3f} ¬± {np.std(total_metrics['precision_scores']):.3f}")
    print(f"   ‚Ä¢ Recall: {avg_recall:.3f} ¬± {np.std(total_metrics['recall_scores']):.3f}")
    
    print(f"\nüìù –°–µ—Ä–µ–¥–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É:")
    print(f"   ‚Ä¢ –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: {avg_keywords:.3f} ¬± {np.std(total_metrics['keyword_scores']):.3f}")
    print(f"   ‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {avg_context:.3f} ¬± {np.std(total_metrics['context_scores']):.3f}")
    
    # –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
    overall_score = (avg_f1 + avg_keywords + avg_context) / 3
    print(f"\nüèÜ –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ RAG —Å–∏—Å—Ç–µ–º–∏: {overall_score:.3f}")
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    final_results = {
        "summary": {
            "average_f1_score": avg_f1,
            "average_precision": avg_precision,
            "average_recall": avg_recall,
            "average_keyword_score": avg_keywords,
            "average_context_score": avg_context,
            "overall_score": overall_score,
            "total_tests": len(evaluator.test_cases)
        },
        "detailed_results": all_results
    }
    
    evaluator.save_results(final_results)
    print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ rag_evaluation_results.json")

def explain_f1_score():
    """–ü–æ—è—Å–Ω–µ–Ω–Ω—è F1 Score"""
    print("\n" + "=" * 60)
    print("üìö –ü–û–Ø–°–ù–ï–ù–ù–Ø F1 SCORE")
    print("=" * 60)
    
    print("""
F1 Score - —Ü–µ –º–µ—Ç—Ä–∏–∫–∞, —è–∫–∞ –ø–æ—î–¥–Ω—É—î —Ç–æ—á–Ω—ñ—Å—Ç—å (Precision) —ñ –ø–æ–≤–Ω–æ—Ç—É (Recall).

üéØ PRECISION (–¢–æ—á–Ω—ñ—Å—Ç—å):
   Precision = –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏—Ç—è–≥–Ω—É—Ç—ñ –∫–∞—Ä—Ç–∏ / –í—Å—ñ –≤–∏—Ç—è–≥–Ω—É—Ç—ñ –∫–∞—Ä—Ç–∏
   
   –ü—Ä–∏–∫–ª–∞–¥: –Ø–∫—â–æ —Å–∏—Å—Ç–µ–º–∞ –≤–∏—Ç—è–≥–ª–∞ 3 –∫–∞—Ä—Ç–∏, –∞ 2 –∑ –Ω–∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ñ:
   Precision = 2/3 = 0.67 (67%)
   
   –í–∏—Å–æ–∫–∏–π Precision –æ–∑–Ω–∞—á–∞—î, —â–æ —Å–∏—Å—Ç–µ–º–∞ —Ä—ñ–¥–∫–æ –ø–æ–º–∏–ª—è—î—Ç—å—Å—è.

üîç RECALL (–ü–æ–≤–Ω–æ—Ç–∞):
   Recall = –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏—Ç—è–≥–Ω—É—Ç—ñ –∫–∞—Ä—Ç–∏ / –í—Å—ñ –æ—á—ñ–∫—É–≤–∞–Ω—ñ –∫–∞—Ä—Ç–∏
   
   –ü—Ä–∏–∫–ª–∞–¥: –Ø–∫—â–æ –æ—á—ñ–∫—É–≤–∞–ª–∏ 2 –∫–∞—Ä—Ç–∏, –∞ –∑–Ω–∞–π—à–ª–∏ —Ç—ñ–ª—å–∫–∏ 1:
   Recall = 1/2 = 0.5 (50%)
   
   –í–∏—Å–æ–∫–∏–π Recall –æ–∑–Ω–∞—á–∞—î, —â–æ —Å–∏—Å—Ç–µ–º–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –±—ñ–ª—å—à—ñ—Å—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.

‚öñÔ∏è F1 SCORE:
   F1 = 2 * (Precision * Recall) / (Precision + Recall)
   
   F1 Score –±–∞–ª–∞–Ω—Å—É—î –º—ñ–∂ —Ç–æ—á–Ω—ñ—Å—Ç—é —ñ –ø–æ–≤–Ω–æ—Ç–æ—é:
   ‚Ä¢ F1 = 1.0 - —ñ–¥–µ–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   ‚Ä¢ F1 = 0.0 - –Ω–∞–π–≥—ñ—Ä—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   ‚Ä¢ F1 > 0.8 - –≤—ñ–¥–º—ñ–Ω–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   ‚Ä¢ F1 > 0.6 - –¥–æ–±—Ä–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   ‚Ä¢ F1 < 0.4 - –ø–æ—Ç—Ä–µ–±—É—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è

üìä –ü–†–ò–ö–õ–ê–î–ò:
   
   –í–∏–ø–∞–¥–æ–∫ 1: –í–∏—Å–æ–∫–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å, –Ω–∏–∑—å–∫–∞ –ø–æ–≤–Ω–æ—Ç–∞
   ‚Ä¢ –í–∏—Ç—è–≥–ª–∏: ["The Magician"] 
   ‚Ä¢ –û—á—ñ–∫—É–≤–∞–ª–∏: ["The Magician", "Death"]
   ‚Ä¢ Precision = 1/1 = 1.0, Recall = 1/2 = 0.5
   ‚Ä¢ F1 = 2 * (1.0 * 0.5) / (1.0 + 0.5) = 0.67
   
   –í–∏–ø–∞–¥–æ–∫ 2: –ù–∏–∑—å–∫–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å, –≤–∏—Å–æ–∫–∞ –ø–æ–≤–Ω–æ—Ç–∞  
   ‚Ä¢ –í–∏—Ç—è–≥–ª–∏: ["The Magician", "Death", "The Fool"]
   ‚Ä¢ –û—á—ñ–∫—É–≤–∞–ª–∏: ["The Magician", "Death"] 
   ‚Ä¢ Precision = 2/3 = 0.67, Recall = 2/2 = 1.0
   ‚Ä¢ F1 = 2 * (0.67 * 1.0) / (0.67 + 1.0) = 0.8
   
   –í–∏–ø–∞–¥–æ–∫ 3: –ó–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   ‚Ä¢ –í–∏—Ç—è–≥–ª–∏: ["The Magician", "Death"]
   ‚Ä¢ –û—á—ñ–∫—É–≤–∞–ª–∏: ["The Magician", "Death"]
   ‚Ä¢ Precision = 2/2 = 1.0, Recall = 2/2 = 1.0  
   ‚Ä¢ F1 = 2 * (1.0 * 1.0) / (1.0 + 1.0) = 1.0
""")

if __name__ == "__main__":
    import sys
    
    if "--explain" in sys.argv:
        explain_f1_score()
    else:
        asyncio.run(run_evaluation())
