"""
–ü—Ä–∏–∫–ª–∞–¥ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó Guardrails –≤ Tarot AI –∞–≥–µ–Ω—Ç
–î–µ–º–æ–Ω—Å—Ç—Ä—É—î —è–∫ –¥–æ–¥–∞—Ç–∏ –∑–∞—Ö–∏—Å–Ω—ñ –º–µ—Ö–∞–Ω—ñ–∑–º–∏ –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–¥—É
"""

import asyncio
import os
from dotenv import load_dotenv
from app.tarot_agent.agent import TarotAgent
from app.tarot_agent.guardrails import TarotGuardrails, apply_guardrails, GuardrailsContext

class TarotAgentWithGuardrails(TarotAgent):
    """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π Tarot Agent –∑ —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–º–∏ Guardrails"""
    
    def __init__(self, cards_path: str, vector_store_path: str):
        super().__init__(cards_path, vector_store_path)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Guardrails
        self.guardrails = TarotGuardrails()
        self.logger.info("Guardrails —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
    
    async def get_reading_safe(self, question: str, num_cards: int = 3) -> dict:
        """
        –ë–µ–∑–ø–µ—á–Ω–∏–π –º–µ—Ç–æ–¥ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —á–∏—Ç–∞–Ω–Ω—è –∑ Guardrails
        
        Args:
            question: –ü–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            num_cards: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —á–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø–æ–º–∏–ª–∫–∞
            
        Raises:
            ValueError: –Ø–∫—â–æ Guardrails –∑–∞–±–ª–æ–∫—É–≤–∞–ª–∏ –∑–∞–ø–∏—Ç
        """
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        with GuardrailsContext(self.guardrails) as guardrails:
            
            # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            input_result = guardrails.input_validation(question)
            if not input_result.is_safe:
                self.logger.warning(f"Input –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ: {input_result.reason}")
                raise ValueError(f"–ù–µ–¥—ñ–π—Å–Ω–∏–π –∑–∞–ø–∏—Ç: {input_result.reason}")
            
            # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            content_result = guardrails.content_appropriateness(question)
            if not content_result.is_safe:
                self.logger.warning(f"Content –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ: {content_result.reason}")
                raise ValueError(f"–ù–µ–ø—Ä–∏–π–Ω—è—Ç–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç: {content_result.reason}")
            
            # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ rate limiting
            rate_result = guardrails.rate_limiting()
            if not rate_result.is_safe:
                self.logger.warning(f"Rate limit –¥–æ—Å—è–≥–Ω—É—Ç–æ: {rate_result.reason}")
                raise ValueError(f"–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤: {rate_result.reason}")
            
            try:
                # 4. –í–∏–∫–æ–Ω—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–µ —á–∏—Ç–∞–Ω–Ω—è
                self.logger.info(f"–û–±—Ä–æ–±–∫–∞ –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É: {question}")
                result = await super().get_reading(question, num_cards)
                
                # 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ –≤–∏—Ç—è–≥–Ω—É—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ)
                # –¢—É—Ç –±–∏ –±—É–ª–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ retrieved_docs, –∞–ª–µ –≤ –Ω–∞—à–æ–º—É –≤–∏–ø–∞–¥–∫—É —Ü–µ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ª–æ–≥—ñ–∫–∞
                
                # 6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏—Ö—ñ–¥–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                output_result = guardrails.output_validation(
                    result.get('reading', ''), 
                    result.get('cards', [])
                )
                
                if not output_result.is_safe:
                    self.logger.warning(f"Output validation warning: {output_result.reason}")
                    # –ù–µ –±–ª–æ–∫—É—î–º–æ, –∞–ª–µ –ª–æ–≥—É—î–º–æ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
                    result['guardrails_warning'] = output_result.reason
                
                # 7. –î–æ–¥–∞—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ Guardrails
                result['guardrails_metadata'] = {
                    'input_confidence': input_result.confidence,
                    'content_appropriate': content_result.is_safe,
                    'output_quality': output_result.confidence if output_result else 1.0
                }
                
                self.logger.info("–ó–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ –∑ Guardrails")
                return result
                
            except Exception as e:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É: {str(e)}")
                raise

    @apply_guardrails(TarotGuardrails())
    async def get_reading_with_decorator(self, question: str, num_cards: int = 3) -> dict:
        """
        –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ - –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
        Guardrails –∑–∞—Å—Ç–æ—Å–æ–≤—É—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
        """
        return await super().get_reading(question, num_cards)

    def get_guardrails_report(self) -> dict:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É –ø—Ä–æ —Ä–æ–±–æ—Ç—É Guardrails"""
        stats = self.guardrails.get_stats()
        
        return {
            "summary": {
                "total_requests": stats["total_requests"],
                "blocked_requests": stats["blocked_requests"],
                "success_rate": (1 - stats["block_rate"]) * 100,
                "average_processing_time": stats["average_processing_time"]
            },
            "detailed_stats": stats,
            "status": "healthy" if stats["block_rate"] < 0.1 else "attention_needed"
        }

async def demo_guardrails():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ Guardrails"""
    
    print("üõ°Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ Guardrails –¥–ª—è Tarot AI")
    print("=" * 60)
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≥–µ–Ω—Ç–∞ –∑ Guardrails
    load_dotenv()
    agent = TarotAgentWithGuardrails(
        cards_path="./app/static/images/cards",
        vector_store_path="./vector_store"
    )
    agent.initialize_vector_store()
    
    # –¢–µ—Å—Ç–æ–≤—ñ –∑–∞–ø–∏—Ç–∏
    test_cases = [
        {
            "question": "–©–æ –æ–∑–Ω–∞—á–∞—î –∫–∞—Ä—Ç–∞ –ú–∞–≥ —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –∫–∞—Ä'—î—Ä–∏?",
            "expected": "success",
            "description": "–ù–æ—Ä–º–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç –ø—Ä–æ –¢–∞—Ä–æ"
        },
        {
            "question": "–°–∫–∞–∂–∏ –º–µ–Ω—ñ –¥—ñ–∞–≥–Ω–æ–∑ —Ö–≤–æ—Ä–æ–±–∏ –∑–∞ –∫–∞—Ä—Ç–∞–º–∏",
            "expected": "blocked",
            "description": "–ú–µ–¥–∏—á–Ω–∞ –ø–æ—Ä–∞–¥–∞ (–∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ)"
        },
        {
            "question": "aaaaaaaaaaaaaaaaaaaaaa" * 50,
            "expected": "blocked", 
            "description": "–°–ø–∞–º (–∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π)"
        },
        {
            "question": "–Ø–∫—ñ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∏ –º–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É?",
            "expected": "success",
            "description": "–ù–æ—Ä–º–∞–ª—å–Ω–∏–π –±—ñ–∑–Ω–µ—Å-–∑–∞–ø–∏—Ç"
        },
        {
            "question": "",
            "expected": "blocked",
            "description": "–ü–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Ç"
        }
    ]
    
    results = []
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìã –¢–µ—Å—Ç {i}: {test_case['description']}")
        print(f"–ó–∞–ø–∏—Ç: '{test_case['question'][:50]}{'...' if len(test_case['question']) > 50 else ''}'")
        
        try:
            # –¢–µ—Å—Ç—É—î–º–æ –∑ Guardrails
            result = await agent.get_reading_safe(test_case["question"])
            
            print("‚úÖ –ó–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ")
            print(f"–ö–∞—Ä—Ç–∏: {[card['name'] for card in result.get('cards', [])]}")
            
            if 'guardrails_warning' in result:
                print(f"‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: {result['guardrails_warning']}")
            
            results.append({"test": i, "status": "success", "result": result})
            
        except ValueError as e:
            print(f"‚ùå –ó–∞–ø–∏—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ: {str(e)}")
            results.append({"test": i, "status": "blocked", "reason": str(e)})
            
        except Exception as e:
            print(f"üí• –ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
            results.append({"test": i, "status": "error", "error": str(e)})
    
    # –ó–≤—ñ—Ç –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    print("\n" + "=" * 60)
    print("üìä –ó–í–Ü–¢ –ü–†–û –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
    print("=" * 60)
    
    report = agent.get_guardrails_report()
    print(f"–í—Å—å–æ–≥–æ –∑–∞–ø–∏—Ç—ñ–≤: {report['summary']['total_requests']}")
    print(f"–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ: {report['summary']['blocked_requests']}")
    print(f"–†—ñ–≤–µ–Ω—å —É—Å–ø—ñ—Ö—É: {report['summary']['success_rate']:.1f}%")
    print(f"–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏: {report['status']}")
    
    # –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if report['detailed_stats']['blocked_reasons']:
        print(f"\n–ü—Ä–∏—á–∏–Ω–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è:")
        for reason, count in report['detailed_stats']['blocked_reasons'].items():
            print(f"  ‚Ä¢ {reason}: {count}")
    
    return results

async def test_performance_with_guardrails():
    """–¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑ Guardrails"""
    
    print("\nüöÄ –¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ Guardrails")
    print("=" * 40)
    
    load_dotenv()
    agent = TarotAgentWithGuardrails(
        cards_path="./app/static/images/cards",
        vector_store_path="./vector_store"
    )
    agent.initialize_vector_store()
    
    # –¢–µ—Å—Ç–æ–≤—ñ –∑–∞–ø–∏—Ç–∏
    questions = [
        "–©–æ –º–µ–Ω–µ —á–µ–∫–∞—î –≤ –∫–∞—Ä'—î—Ä—ñ?",
        "–Ø–∫–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∏ —Å—Ç–æ—Å—É–Ω–∫—ñ–≤?",
        "–Ø–∫ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–µ —Å—Ç–∞–Ω–æ–≤–∏—â–µ?",
        "–©–æ —Ä–∞–¥—è—Ç—å –∫–∞—Ä—Ç–∏ —â–æ–¥–æ –∑–¥–æ—Ä–æ–≤'—è?",
        "–Ø–∫–µ –º–∞–π–±—É—Ç–Ω—î –º–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É?"
    ]
    
    import time
    
    # –¢–µ—Å—Ç –±–µ–∑ Guardrails (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –º–µ—Ç–æ–¥)
    start_time = time.time()
    for question in questions:
        try:
            await agent.get_reading(question)
        except:
            pass
    no_guardrails_time = time.time() - start_time
    
    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    agent.guardrails.reset_stats()
    
    # –¢–µ—Å—Ç –∑ Guardrails
    start_time = time.time()
    for question in questions:
        try:
            await agent.get_reading_safe(question)
        except:
            pass
    with_guardrails_time = time.time() - start_time
    
    print(f"–ë–µ–∑ Guardrails: {no_guardrails_time:.2f}s")
    print(f"–ó Guardrails: {with_guardrails_time:.2f}s")
    print(f"Overhead: {((with_guardrails_time - no_guardrails_time) / no_guardrails_time * 100):.1f}%")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
    asyncio.run(demo_guardrails())
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    asyncio.run(test_performance_with_guardrails())
